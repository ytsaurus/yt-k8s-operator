// Code generated by MockGen. DO NOT EDIT.
// Source: go.ytsaurus.tech/yt/go/yt (interfaces: Client)

// Package mock_yt is a generated GoMock package.
package mock_yt

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	guid "go.ytsaurus.tech/yt/go/guid"
	ypath "go.ytsaurus.tech/yt/go/ypath"
	yt "go.ytsaurus.tech/yt/go/yt"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AbortOperation mocks base method.
func (m *MockClient) AbortOperation(arg0 context.Context, arg1 yt.OperationID, arg2 *yt.AbortOperationOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortOperation", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AbortOperation indicates an expected call of AbortOperation.
func (mr *MockClientMockRecorder) AbortOperation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortOperation", reflect.TypeOf((*MockClient)(nil).AbortOperation), arg0, arg1, arg2)
}

// AbortQuery mocks base method.
func (m *MockClient) AbortQuery(arg0 context.Context, arg1 yt.QueryID, arg2 *yt.AbortQueryOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortQuery", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AbortQuery indicates an expected call of AbortQuery.
func (mr *MockClientMockRecorder) AbortQuery(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortQuery", reflect.TypeOf((*MockClient)(nil).AbortQuery), arg0, arg1, arg2)
}

// AbortTx mocks base method.
func (m *MockClient) AbortTx(arg0 context.Context, arg1 yt.TxID, arg2 *yt.AbortTxOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AbortTx indicates an expected call of AbortTx.
func (mr *MockClientMockRecorder) AbortTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortTx", reflect.TypeOf((*MockClient)(nil).AbortTx), arg0, arg1, arg2)
}

// AddMaintenance mocks base method.
func (m *MockClient) AddMaintenance(arg0 context.Context, arg1 yt.MaintenanceComponent, arg2 string, arg3 yt.MaintenanceType, arg4 string, arg5 *yt.AddMaintenanceOptions) (*yt.AddMaintenanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMaintenance", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*yt.AddMaintenanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMaintenance indicates an expected call of AddMaintenance.
func (mr *MockClientMockRecorder) AddMaintenance(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMaintenance", reflect.TypeOf((*MockClient)(nil).AddMaintenance), arg0, arg1, arg2, arg3, arg4, arg5)
}

// AddMember mocks base method.
func (m *MockClient) AddMember(arg0 context.Context, arg1, arg2 string, arg3 *yt.AddMemberOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMember", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMember indicates an expected call of AddMember.
func (mr *MockClientMockRecorder) AddMember(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMember", reflect.TypeOf((*MockClient)(nil).AddMember), arg0, arg1, arg2, arg3)
}

// AlterQuery mocks base method.
func (m *MockClient) AlterQuery(arg0 context.Context, arg1 yt.QueryID, arg2 *yt.AlterQueryOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterQuery", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterQuery indicates an expected call of AlterQuery.
func (mr *MockClientMockRecorder) AlterQuery(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterQuery", reflect.TypeOf((*MockClient)(nil).AlterQuery), arg0, arg1, arg2)
}

// AlterTable mocks base method.
func (m *MockClient) AlterTable(arg0 context.Context, arg1 ypath.Path, arg2 *yt.AlterTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterTable", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterTable indicates an expected call of AlterTable.
func (mr *MockClientMockRecorder) AlterTable(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterTable", reflect.TypeOf((*MockClient)(nil).AlterTable), arg0, arg1, arg2)
}

// AlterTableReplica mocks base method.
func (m *MockClient) AlterTableReplica(arg0 context.Context, arg1 yt.NodeID, arg2 *yt.AlterTableReplicaOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterTableReplica", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AlterTableReplica indicates an expected call of AlterTableReplica.
func (mr *MockClientMockRecorder) AlterTableReplica(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterTableReplica", reflect.TypeOf((*MockClient)(nil).AlterTableReplica), arg0, arg1, arg2)
}

// BeginTabletTx mocks base method.
func (m *MockClient) BeginTabletTx(arg0 context.Context, arg1 *yt.StartTabletTxOptions) (yt.TabletTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTabletTx", arg0, arg1)
	ret0, _ := ret[0].(yt.TabletTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTabletTx indicates an expected call of BeginTabletTx.
func (mr *MockClientMockRecorder) BeginTabletTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTabletTx", reflect.TypeOf((*MockClient)(nil).BeginTabletTx), arg0, arg1)
}

// BeginTx mocks base method.
func (m *MockClient) BeginTx(arg0 context.Context, arg1 *yt.StartTxOptions) (yt.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", arg0, arg1)
	ret0, _ := ret[0].(yt.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockClientMockRecorder) BeginTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockClient)(nil).BeginTx), arg0, arg1)
}

// BuildMasterSnapshots mocks base method.
func (m *MockClient) BuildMasterSnapshots(arg0 context.Context, arg1 *yt.BuildMasterSnapshotsOptions) (*[]yt.BuildMasterSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildMasterSnapshots", arg0, arg1)
	ret0, _ := ret[0].(*[]yt.BuildMasterSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildMasterSnapshots indicates an expected call of BuildMasterSnapshots.
func (mr *MockClientMockRecorder) BuildMasterSnapshots(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildMasterSnapshots", reflect.TypeOf((*MockClient)(nil).BuildMasterSnapshots), arg0, arg1)
}

// BuildSnapshot mocks base method.
func (m *MockClient) BuildSnapshot(arg0 context.Context, arg1 *yt.BuildSnapshotOptions) (*yt.BuildSnapshotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildSnapshot", arg0, arg1)
	ret0, _ := ret[0].(*yt.BuildSnapshotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildSnapshot indicates an expected call of BuildSnapshot.
func (mr *MockClientMockRecorder) BuildSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildSnapshot", reflect.TypeOf((*MockClient)(nil).BuildSnapshot), arg0, arg1)
}

// CheckPermission mocks base method.
func (m *MockClient) CheckPermission(arg0 context.Context, arg1, arg2 string, arg3 ypath.YPath, arg4 *yt.CheckPermissionOptions) (*yt.CheckPermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPermission", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*yt.CheckPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPermission indicates an expected call of CheckPermission.
func (mr *MockClientMockRecorder) CheckPermission(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPermission", reflect.TypeOf((*MockClient)(nil).CheckPermission), arg0, arg1, arg2, arg3, arg4)
}

// CommitTx mocks base method.
func (m *MockClient) CommitTx(arg0 context.Context, arg1 yt.TxID, arg2 *yt.CommitTxOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTx indicates an expected call of CommitTx.
func (mr *MockClientMockRecorder) CommitTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTx", reflect.TypeOf((*MockClient)(nil).CommitTx), arg0, arg1, arg2)
}

// CompleteOperation mocks base method.
func (m *MockClient) CompleteOperation(arg0 context.Context, arg1 yt.OperationID, arg2 *yt.CompleteOperationOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteOperation", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteOperation indicates an expected call of CompleteOperation.
func (mr *MockClientMockRecorder) CompleteOperation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteOperation", reflect.TypeOf((*MockClient)(nil).CompleteOperation), arg0, arg1, arg2)
}

// CopyNode mocks base method.
func (m *MockClient) CopyNode(arg0 context.Context, arg1, arg2 ypath.YPath, arg3 *yt.CopyNodeOptions) (yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyNode", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyNode indicates an expected call of CopyNode.
func (mr *MockClientMockRecorder) CopyNode(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyNode", reflect.TypeOf((*MockClient)(nil).CopyNode), arg0, arg1, arg2, arg3)
}

// CreateNode mocks base method.
func (m *MockClient) CreateNode(arg0 context.Context, arg1 ypath.YPath, arg2 yt.NodeType, arg3 *yt.CreateNodeOptions) (yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNode", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNode indicates an expected call of CreateNode.
func (mr *MockClientMockRecorder) CreateNode(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNode", reflect.TypeOf((*MockClient)(nil).CreateNode), arg0, arg1, arg2, arg3)
}

// CreateObject mocks base method.
func (m *MockClient) CreateObject(arg0 context.Context, arg1 yt.NodeType, arg2 *yt.CreateObjectOptions) (yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateObject", arg0, arg1, arg2)
	ret0, _ := ret[0].(yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateObject indicates an expected call of CreateObject.
func (mr *MockClientMockRecorder) CreateObject(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObject", reflect.TypeOf((*MockClient)(nil).CreateObject), arg0, arg1, arg2)
}

// CreateTableBackup mocks base method.
func (m *MockClient) CreateTableBackup(arg0 context.Context, arg1 yt.BackupManifest, arg2 *yt.CreateTableBackupOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTableBackup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTableBackup indicates an expected call of CreateTableBackup.
func (mr *MockClientMockRecorder) CreateTableBackup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTableBackup", reflect.TypeOf((*MockClient)(nil).CreateTableBackup), arg0, arg1, arg2)
}

// DeleteRows mocks base method.
func (m *MockClient) DeleteRows(arg0 context.Context, arg1 ypath.Path, arg2 []interface{}, arg3 *yt.DeleteRowsOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRows", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRows indicates an expected call of DeleteRows.
func (mr *MockClientMockRecorder) DeleteRows(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRows", reflect.TypeOf((*MockClient)(nil).DeleteRows), arg0, arg1, arg2, arg3)
}

// DestroyChunkLocations mocks base method.
func (m *MockClient) DestroyChunkLocations(arg0 context.Context, arg1 string, arg2 bool, arg3 []guid.GUID, arg4 *yt.DestroyChunkLocationsOptions) (*yt.DestroyChunkLocationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyChunkLocations", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*yt.DestroyChunkLocationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DestroyChunkLocations indicates an expected call of DestroyChunkLocations.
func (mr *MockClientMockRecorder) DestroyChunkLocations(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyChunkLocations", reflect.TypeOf((*MockClient)(nil).DestroyChunkLocations), arg0, arg1, arg2, arg3, arg4)
}

// DisableChunkLocations mocks base method.
func (m *MockClient) DisableChunkLocations(arg0 context.Context, arg1 string, arg2 []guid.GUID, arg3 *yt.DisableChunkLocationsOptions) (*yt.DisableChunkLocationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableChunkLocations", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*yt.DisableChunkLocationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableChunkLocations indicates an expected call of DisableChunkLocations.
func (mr *MockClientMockRecorder) DisableChunkLocations(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableChunkLocations", reflect.TypeOf((*MockClient)(nil).DisableChunkLocations), arg0, arg1, arg2, arg3)
}

// FreezeTable mocks base method.
func (m *MockClient) FreezeTable(arg0 context.Context, arg1 ypath.Path, arg2 *yt.FreezeTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FreezeTable", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FreezeTable indicates an expected call of FreezeTable.
func (mr *MockClientMockRecorder) FreezeTable(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreezeTable", reflect.TypeOf((*MockClient)(nil).FreezeTable), arg0, arg1, arg2)
}

// GenerateTimestamp mocks base method.
func (m *MockClient) GenerateTimestamp(arg0 context.Context, arg1 *yt.GenerateTimestampOptions) (yt.Timestamp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTimestamp", arg0, arg1)
	ret0, _ := ret[0].(yt.Timestamp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTimestamp indicates an expected call of GenerateTimestamp.
func (mr *MockClientMockRecorder) GenerateTimestamp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTimestamp", reflect.TypeOf((*MockClient)(nil).GenerateTimestamp), arg0, arg1)
}

// GetFileFromCache mocks base method.
func (m *MockClient) GetFileFromCache(arg0 context.Context, arg1 string, arg2 *yt.GetFileFromCacheOptions) (ypath.YPath, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileFromCache", arg0, arg1, arg2)
	ret0, _ := ret[0].(ypath.YPath)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileFromCache indicates an expected call of GetFileFromCache.
func (mr *MockClientMockRecorder) GetFileFromCache(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileFromCache", reflect.TypeOf((*MockClient)(nil).GetFileFromCache), arg0, arg1, arg2)
}

// GetInSyncReplicas mocks base method.
func (m *MockClient) GetInSyncReplicas(arg0 context.Context, arg1 ypath.Path, arg2 yt.Timestamp, arg3 []interface{}, arg4 *yt.GetInSyncReplicasOptions) ([]yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInSyncReplicas", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInSyncReplicas indicates an expected call of GetInSyncReplicas.
func (mr *MockClientMockRecorder) GetInSyncReplicas(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInSyncReplicas", reflect.TypeOf((*MockClient)(nil).GetInSyncReplicas), arg0, arg1, arg2, arg3, arg4)
}

// GetJobStderr mocks base method.
func (m *MockClient) GetJobStderr(arg0 context.Context, arg1 yt.OperationID, arg2 yt.JobID, arg3 *yt.GetJobStderrOptions) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobStderr", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobStderr indicates an expected call of GetJobStderr.
func (mr *MockClientMockRecorder) GetJobStderr(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobStderr", reflect.TypeOf((*MockClient)(nil).GetJobStderr), arg0, arg1, arg2, arg3)
}

// GetNode mocks base method.
func (m *MockClient) GetNode(arg0 context.Context, arg1 ypath.YPath, arg2 interface{}, arg3 *yt.GetNodeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNode indicates an expected call of GetNode.
func (mr *MockClientMockRecorder) GetNode(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockClient)(nil).GetNode), arg0, arg1, arg2, arg3)
}

// GetOperation mocks base method.
func (m *MockClient) GetOperation(arg0 context.Context, arg1 yt.OperationID, arg2 *yt.GetOperationOptions) (*yt.OperationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperation", arg0, arg1, arg2)
	ret0, _ := ret[0].(*yt.OperationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockClientMockRecorder) GetOperation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockClient)(nil).GetOperation), arg0, arg1, arg2)
}

// GetOperationByAlias mocks base method.
func (m *MockClient) GetOperationByAlias(arg0 context.Context, arg1 string, arg2 *yt.GetOperationOptions) (*yt.OperationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationByAlias", arg0, arg1, arg2)
	ret0, _ := ret[0].(*yt.OperationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationByAlias indicates an expected call of GetOperationByAlias.
func (mr *MockClientMockRecorder) GetOperationByAlias(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationByAlias", reflect.TypeOf((*MockClient)(nil).GetOperationByAlias), arg0, arg1, arg2)
}

// GetQuery mocks base method.
func (m *MockClient) GetQuery(arg0 context.Context, arg1 yt.QueryID, arg2 *yt.GetQueryOptions) (*yt.Query, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuery", arg0, arg1, arg2)
	ret0, _ := ret[0].(*yt.Query)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuery indicates an expected call of GetQuery.
func (mr *MockClientMockRecorder) GetQuery(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuery", reflect.TypeOf((*MockClient)(nil).GetQuery), arg0, arg1, arg2)
}

// GetQueryResult mocks base method.
func (m *MockClient) GetQueryResult(arg0 context.Context, arg1 yt.QueryID, arg2 int64, arg3 *yt.GetQueryResultOptions) (*yt.QueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryResult", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*yt.QueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryResult indicates an expected call of GetQueryResult.
func (mr *MockClientMockRecorder) GetQueryResult(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryResult", reflect.TypeOf((*MockClient)(nil).GetQueryResult), arg0, arg1, arg2, arg3)
}

// InsertRowBatch mocks base method.
func (m *MockClient) InsertRowBatch(arg0 context.Context, arg1 ypath.Path, arg2 yt.RowBatch, arg3 *yt.InsertRowsOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRowBatch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRowBatch indicates an expected call of InsertRowBatch.
func (mr *MockClientMockRecorder) InsertRowBatch(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRowBatch", reflect.TypeOf((*MockClient)(nil).InsertRowBatch), arg0, arg1, arg2, arg3)
}

// InsertRows mocks base method.
func (m *MockClient) InsertRows(arg0 context.Context, arg1 ypath.Path, arg2 []interface{}, arg3 *yt.InsertRowsOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRows", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRows indicates an expected call of InsertRows.
func (mr *MockClientMockRecorder) InsertRows(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRows", reflect.TypeOf((*MockClient)(nil).InsertRows), arg0, arg1, arg2, arg3)
}

// LinkNode mocks base method.
func (m *MockClient) LinkNode(arg0 context.Context, arg1, arg2 ypath.YPath, arg3 *yt.LinkNodeOptions) (yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkNode", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LinkNode indicates an expected call of LinkNode.
func (mr *MockClientMockRecorder) LinkNode(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkNode", reflect.TypeOf((*MockClient)(nil).LinkNode), arg0, arg1, arg2, arg3)
}

// ListJobs mocks base method.
func (m *MockClient) ListJobs(arg0 context.Context, arg1 yt.OperationID, arg2 *yt.ListJobsOptions) (*yt.ListJobsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", arg0, arg1, arg2)
	ret0, _ := ret[0].(*yt.ListJobsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockClientMockRecorder) ListJobs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockClient)(nil).ListJobs), arg0, arg1, arg2)
}

// ListNode mocks base method.
func (m *MockClient) ListNode(arg0 context.Context, arg1 ypath.YPath, arg2 interface{}, arg3 *yt.ListNodeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNode", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNode indicates an expected call of ListNode.
func (mr *MockClientMockRecorder) ListNode(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNode", reflect.TypeOf((*MockClient)(nil).ListNode), arg0, arg1, arg2, arg3)
}

// ListOperations mocks base method.
func (m *MockClient) ListOperations(arg0 context.Context, arg1 *yt.ListOperationsOptions) (*yt.ListOperationsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOperations", arg0, arg1)
	ret0, _ := ret[0].(*yt.ListOperationsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockClientMockRecorder) ListOperations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockClient)(nil).ListOperations), arg0, arg1)
}

// ListQueries mocks base method.
func (m *MockClient) ListQueries(arg0 context.Context, arg1 *yt.ListQueriesOptions) (*yt.ListQueriesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueries", arg0, arg1)
	ret0, _ := ret[0].(*yt.ListQueriesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQueries indicates an expected call of ListQueries.
func (mr *MockClientMockRecorder) ListQueries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueries", reflect.TypeOf((*MockClient)(nil).ListQueries), arg0, arg1)
}

// LocateSkynetShare mocks base method.
func (m *MockClient) LocateSkynetShare(arg0 context.Context, arg1 ypath.YPath, arg2 *yt.LocateSkynetShareOptions) (yt.ShareLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocateSkynetShare", arg0, arg1, arg2)
	ret0, _ := ret[0].(yt.ShareLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LocateSkynetShare indicates an expected call of LocateSkynetShare.
func (mr *MockClientMockRecorder) LocateSkynetShare(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocateSkynetShare", reflect.TypeOf((*MockClient)(nil).LocateSkynetShare), arg0, arg1, arg2)
}

// LockRows mocks base method.
func (m *MockClient) LockRows(arg0 context.Context, arg1 ypath.Path, arg2 []string, arg3 yt.LockType, arg4 []interface{}, arg5 *yt.LockRowsOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockRows", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockRows indicates an expected call of LockRows.
func (mr *MockClientMockRecorder) LockRows(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockRows", reflect.TypeOf((*MockClient)(nil).LockRows), arg0, arg1, arg2, arg3, arg4, arg5)
}

// LookupRows mocks base method.
func (m *MockClient) LookupRows(arg0 context.Context, arg1 ypath.Path, arg2 []interface{}, arg3 *yt.LookupRowsOptions) (yt.TableReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupRows", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(yt.TableReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupRows indicates an expected call of LookupRows.
func (mr *MockClientMockRecorder) LookupRows(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupRows", reflect.TypeOf((*MockClient)(nil).LookupRows), arg0, arg1, arg2, arg3)
}

// MountTable mocks base method.
func (m *MockClient) MountTable(arg0 context.Context, arg1 ypath.Path, arg2 *yt.MountTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MountTable", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MountTable indicates an expected call of MountTable.
func (mr *MockClientMockRecorder) MountTable(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountTable", reflect.TypeOf((*MockClient)(nil).MountTable), arg0, arg1, arg2)
}

// MoveNode mocks base method.
func (m *MockClient) MoveNode(arg0 context.Context, arg1, arg2 ypath.YPath, arg3 *yt.MoveNodeOptions) (yt.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveNode", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(yt.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveNode indicates an expected call of MoveNode.
func (mr *MockClientMockRecorder) MoveNode(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveNode", reflect.TypeOf((*MockClient)(nil).MoveNode), arg0, arg1, arg2, arg3)
}

// MultisetAttributes mocks base method.
func (m *MockClient) MultisetAttributes(arg0 context.Context, arg1 ypath.YPath, arg2 map[string]interface{}, arg3 *yt.MultisetAttributesOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultisetAttributes", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// MultisetAttributes indicates an expected call of MultisetAttributes.
func (mr *MockClientMockRecorder) MultisetAttributes(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultisetAttributes", reflect.TypeOf((*MockClient)(nil).MultisetAttributes), arg0, arg1, arg2, arg3)
}

// NewRowBatchWriter mocks base method.
func (m *MockClient) NewRowBatchWriter() yt.RowBatchWriter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRowBatchWriter")
	ret0, _ := ret[0].(yt.RowBatchWriter)
	return ret0
}

// NewRowBatchWriter indicates an expected call of NewRowBatchWriter.
func (mr *MockClientMockRecorder) NewRowBatchWriter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRowBatchWriter", reflect.TypeOf((*MockClient)(nil).NewRowBatchWriter))
}

// NodeExists mocks base method.
func (m *MockClient) NodeExists(arg0 context.Context, arg1 ypath.YPath, arg2 *yt.NodeExistsOptions) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeExists", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeExists indicates an expected call of NodeExists.
func (mr *MockClientMockRecorder) NodeExists(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeExists", reflect.TypeOf((*MockClient)(nil).NodeExists), arg0, arg1, arg2)
}

// PingTx mocks base method.
func (m *MockClient) PingTx(arg0 context.Context, arg1 yt.TxID, arg2 *yt.PingTxOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingTx indicates an expected call of PingTx.
func (mr *MockClientMockRecorder) PingTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingTx", reflect.TypeOf((*MockClient)(nil).PingTx), arg0, arg1, arg2)
}

// PutFileToCache mocks base method.
func (m *MockClient) PutFileToCache(arg0 context.Context, arg1 ypath.YPath, arg2 string, arg3 *yt.PutFileToCacheOptions) (ypath.YPath, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFileToCache", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(ypath.YPath)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutFileToCache indicates an expected call of PutFileToCache.
func (mr *MockClientMockRecorder) PutFileToCache(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFileToCache", reflect.TypeOf((*MockClient)(nil).PutFileToCache), arg0, arg1, arg2, arg3)
}

// ReadFile mocks base method.
func (m *MockClient) ReadFile(arg0 context.Context, arg1 ypath.YPath, arg2 *yt.ReadFileOptions) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockClientMockRecorder) ReadFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockClient)(nil).ReadFile), arg0, arg1, arg2)
}

// ReadQueryResult mocks base method.
func (m *MockClient) ReadQueryResult(arg0 context.Context, arg1 yt.QueryID, arg2 int64, arg3 *yt.ReadQueryResultOptions) (yt.TableReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadQueryResult", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(yt.TableReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadQueryResult indicates an expected call of ReadQueryResult.
func (mr *MockClientMockRecorder) ReadQueryResult(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadQueryResult", reflect.TypeOf((*MockClient)(nil).ReadQueryResult), arg0, arg1, arg2, arg3)
}

// ReadTable mocks base method.
func (m *MockClient) ReadTable(arg0 context.Context, arg1 ypath.YPath, arg2 *yt.ReadTableOptions) (yt.TableReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTable", arg0, arg1, arg2)
	ret0, _ := ret[0].(yt.TableReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTable indicates an expected call of ReadTable.
func (mr *MockClientMockRecorder) ReadTable(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTable", reflect.TypeOf((*MockClient)(nil).ReadTable), arg0, arg1, arg2)
}

// RemountTable mocks base method.
func (m *MockClient) RemountTable(arg0 context.Context, arg1 ypath.Path, arg2 *yt.RemountTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemountTable", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemountTable indicates an expected call of RemountTable.
func (mr *MockClientMockRecorder) RemountTable(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemountTable", reflect.TypeOf((*MockClient)(nil).RemountTable), arg0, arg1, arg2)
}

// RemoveMaintenance mocks base method.
func (m *MockClient) RemoveMaintenance(arg0 context.Context, arg1 yt.MaintenanceComponent, arg2 string, arg3 *yt.RemoveMaintenanceOptions) (*yt.RemoveMaintenanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMaintenance", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*yt.RemoveMaintenanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMaintenance indicates an expected call of RemoveMaintenance.
func (mr *MockClientMockRecorder) RemoveMaintenance(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMaintenance", reflect.TypeOf((*MockClient)(nil).RemoveMaintenance), arg0, arg1, arg2, arg3)
}

// RemoveMember mocks base method.
func (m *MockClient) RemoveMember(arg0 context.Context, arg1, arg2 string, arg3 *yt.RemoveMemberOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMember", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMember indicates an expected call of RemoveMember.
func (mr *MockClientMockRecorder) RemoveMember(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMember", reflect.TypeOf((*MockClient)(nil).RemoveMember), arg0, arg1, arg2, arg3)
}

// RemoveNode mocks base method.
func (m *MockClient) RemoveNode(arg0 context.Context, arg1 ypath.YPath, arg2 *yt.RemoveNodeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNode", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNode indicates an expected call of RemoveNode.
func (mr *MockClientMockRecorder) RemoveNode(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNode", reflect.TypeOf((*MockClient)(nil).RemoveNode), arg0, arg1, arg2)
}

// RequestRestart mocks base method.
func (m *MockClient) RequestRestart(arg0 context.Context, arg1 string, arg2 *yt.RequestRestartOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestRestart", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestRestart indicates an expected call of RequestRestart.
func (mr *MockClientMockRecorder) RequestRestart(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestRestart", reflect.TypeOf((*MockClient)(nil).RequestRestart), arg0, arg1, arg2)
}

// ReshardTable mocks base method.
func (m *MockClient) ReshardTable(arg0 context.Context, arg1 ypath.Path, arg2 *yt.ReshardTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReshardTable", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReshardTable indicates an expected call of ReshardTable.
func (mr *MockClientMockRecorder) ReshardTable(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReshardTable", reflect.TypeOf((*MockClient)(nil).ReshardTable), arg0, arg1, arg2)
}

// RestoreTableBackup mocks base method.
func (m *MockClient) RestoreTableBackup(arg0 context.Context, arg1 yt.BackupManifest, arg2 *yt.RestoreTableBackupOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreTableBackup", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreTableBackup indicates an expected call of RestoreTableBackup.
func (mr *MockClientMockRecorder) RestoreTableBackup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreTableBackup", reflect.TypeOf((*MockClient)(nil).RestoreTableBackup), arg0, arg1, arg2)
}

// ResumeOperation mocks base method.
func (m *MockClient) ResumeOperation(arg0 context.Context, arg1 yt.OperationID, arg2 *yt.ResumeOperationOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeOperation", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumeOperation indicates an expected call of ResumeOperation.
func (mr *MockClientMockRecorder) ResumeOperation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeOperation", reflect.TypeOf((*MockClient)(nil).ResumeOperation), arg0, arg1, arg2)
}

// ResurrectChunkLocations mocks base method.
func (m *MockClient) ResurrectChunkLocations(arg0 context.Context, arg1 string, arg2 []guid.GUID, arg3 *yt.ResurrectChunkLocationsOptions) (*yt.ResurrectChunkLocationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResurrectChunkLocations", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*yt.ResurrectChunkLocationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResurrectChunkLocations indicates an expected call of ResurrectChunkLocations.
func (mr *MockClientMockRecorder) ResurrectChunkLocations(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResurrectChunkLocations", reflect.TypeOf((*MockClient)(nil).ResurrectChunkLocations), arg0, arg1, arg2, arg3)
}

// SelectRows mocks base method.
func (m *MockClient) SelectRows(arg0 context.Context, arg1 string, arg2 *yt.SelectRowsOptions) (yt.TableReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRows", arg0, arg1, arg2)
	ret0, _ := ret[0].(yt.TableReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectRows indicates an expected call of SelectRows.
func (mr *MockClientMockRecorder) SelectRows(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRows", reflect.TypeOf((*MockClient)(nil).SelectRows), arg0, arg1, arg2)
}

// SetNode mocks base method.
func (m *MockClient) SetNode(arg0 context.Context, arg1 ypath.YPath, arg2 interface{}, arg3 *yt.SetNodeOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNode", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNode indicates an expected call of SetNode.
func (mr *MockClientMockRecorder) SetNode(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNode", reflect.TypeOf((*MockClient)(nil).SetNode), arg0, arg1, arg2, arg3)
}

// StartOperation mocks base method.
func (m *MockClient) StartOperation(arg0 context.Context, arg1 yt.OperationType, arg2 interface{}, arg3 *yt.StartOperationOptions) (yt.OperationID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartOperation", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(yt.OperationID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartOperation indicates an expected call of StartOperation.
func (mr *MockClientMockRecorder) StartOperation(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartOperation", reflect.TypeOf((*MockClient)(nil).StartOperation), arg0, arg1, arg2, arg3)
}

// StartQuery mocks base method.
func (m *MockClient) StartQuery(arg0 context.Context, arg1 yt.QueryEngine, arg2 string, arg3 *yt.StartQueryOptions) (yt.QueryID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartQuery", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(yt.QueryID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartQuery indicates an expected call of StartQuery.
func (mr *MockClientMockRecorder) StartQuery(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartQuery", reflect.TypeOf((*MockClient)(nil).StartQuery), arg0, arg1, arg2, arg3)
}

// StartTabletTx mocks base method.
func (m *MockClient) StartTabletTx(arg0 context.Context, arg1 *yt.StartTabletTxOptions) (yt.TxID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTabletTx", arg0, arg1)
	ret0, _ := ret[0].(yt.TxID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTabletTx indicates an expected call of StartTabletTx.
func (mr *MockClientMockRecorder) StartTabletTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTabletTx", reflect.TypeOf((*MockClient)(nil).StartTabletTx), arg0, arg1)
}

// StartTx mocks base method.
func (m *MockClient) StartTx(arg0 context.Context, arg1 *yt.StartTxOptions) (yt.TxID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTx", arg0, arg1)
	ret0, _ := ret[0].(yt.TxID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTx indicates an expected call of StartTx.
func (mr *MockClientMockRecorder) StartTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTx", reflect.TypeOf((*MockClient)(nil).StartTx), arg0, arg1)
}

// Stop mocks base method.
func (m *MockClient) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockClientMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockClient)(nil).Stop))
}

// SuspendOperation mocks base method.
func (m *MockClient) SuspendOperation(arg0 context.Context, arg1 yt.OperationID, arg2 *yt.SuspendOperationOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuspendOperation", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SuspendOperation indicates an expected call of SuspendOperation.
func (mr *MockClientMockRecorder) SuspendOperation(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuspendOperation", reflect.TypeOf((*MockClient)(nil).SuspendOperation), arg0, arg1, arg2)
}

// TransferAccountResources mocks base method.
func (m *MockClient) TransferAccountResources(arg0 context.Context, arg1, arg2 string, arg3 interface{}, arg4 *yt.TransferAccountResourcesOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferAccountResources", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferAccountResources indicates an expected call of TransferAccountResources.
func (mr *MockClientMockRecorder) TransferAccountResources(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferAccountResources", reflect.TypeOf((*MockClient)(nil).TransferAccountResources), arg0, arg1, arg2, arg3, arg4)
}

// TransferPoolResources mocks base method.
func (m *MockClient) TransferPoolResources(arg0 context.Context, arg1, arg2, arg3 string, arg4 interface{}, arg5 *yt.TransferPoolResourcesOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferPoolResources", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferPoolResources indicates an expected call of TransferPoolResources.
func (mr *MockClientMockRecorder) TransferPoolResources(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferPoolResources", reflect.TypeOf((*MockClient)(nil).TransferPoolResources), arg0, arg1, arg2, arg3, arg4, arg5)
}

// UnfreezeTable mocks base method.
func (m *MockClient) UnfreezeTable(arg0 context.Context, arg1 ypath.Path, arg2 *yt.UnfreezeTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnfreezeTable", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnfreezeTable indicates an expected call of UnfreezeTable.
func (mr *MockClientMockRecorder) UnfreezeTable(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnfreezeTable", reflect.TypeOf((*MockClient)(nil).UnfreezeTable), arg0, arg1, arg2)
}

// UnmountTable mocks base method.
func (m *MockClient) UnmountTable(arg0 context.Context, arg1 ypath.Path, arg2 *yt.UnmountTableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmountTable", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmountTable indicates an expected call of UnmountTable.
func (mr *MockClientMockRecorder) UnmountTable(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmountTable", reflect.TypeOf((*MockClient)(nil).UnmountTable), arg0, arg1, arg2)
}

// UpdateOperationParameters mocks base method.
func (m *MockClient) UpdateOperationParameters(arg0 context.Context, arg1 yt.OperationID, arg2 interface{}, arg3 *yt.UpdateOperationParametersOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOperationParameters", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOperationParameters indicates an expected call of UpdateOperationParameters.
func (mr *MockClientMockRecorder) UpdateOperationParameters(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOperationParameters", reflect.TypeOf((*MockClient)(nil).UpdateOperationParameters), arg0, arg1, arg2, arg3)
}

// WriteFile mocks base method.
func (m *MockClient) WriteFile(arg0 context.Context, arg1 ypath.YPath, arg2 *yt.WriteFileOptions) (io.WriteCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockClientMockRecorder) WriteFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockClient)(nil).WriteFile), arg0, arg1, arg2)
}

// WriteTable mocks base method.
func (m *MockClient) WriteTable(arg0 context.Context, arg1 ypath.YPath, arg2 *yt.WriteTableOptions) (yt.TableWriter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTable", arg0, arg1, arg2)
	ret0, _ := ret[0].(yt.TableWriter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteTable indicates an expected call of WriteTable.
func (mr *MockClientMockRecorder) WriteTable(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTable", reflect.TypeOf((*MockClient)(nil).WriteTable), arg0, arg1, arg2)
}
